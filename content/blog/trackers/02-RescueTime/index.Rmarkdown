---
title: "Rescue Time"
weight: 2
subtitle: "An app to track your computer and mobile phone usage"
excerpt: "The RescueTime app is a **productivity** tracker that you can install on your computer and mobile devices. Here, you'll read about my experiences with the RescueTime app and how you can get the most out of your data!"
date: 2022-02-19
draft: false
categories: [Habits, Productivity, RescueTime]

---

<style>body {text-align: justify}</style>

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE,
                      message = FALSE,
                      fig.width = 8)
#figure width:
w <- knitr::opts_chunk$get("fig.width")

library(here)
library(pins)
library(tidyverse)
library(grid)
library(ggtext)
library(png)
library(lubridate)
library(htmltools)
library(reactable)
library(sparkline)
library(icons) 
library(htmlwidgets)

xaringanExtra::use_panelset()
```

```{r load_data, include=FALSE}
RescueTime <- pin_get("RescueTime")
RT_plots <- pin_get("RT_plots")

Productivity_col <- rgb(red = c(13, 65, 177, 218, 212, 160),
                        green = c(88, 130, 193, 105, 28, 235),
                        blue = c(193, 221, 191, 93, 21, 142),
                        names = c("Very Productive", "Productive", "Neutral", 
                                  "Distracting", "Very Distracting", "Mobile Phone"), maxColorValue = 255)

all_dates <- seq(RescueTime[["day"]]$Date[1], rev(RescueTime[["day"]]$Date)[1], by = "day")
ndays <- length(all_dates)
ndays_mobile <- length(unique(RescueTime[["mobile"]]$Date))

# function to get exact height of beeswarm plots:
plot_height_single_beeswarm <- function(p, plot_width, unit){
  gt <-  ggplotGrob(p)
  panel <- gt$layout[which(gt$layout$name == "panel"), ]
  aspect.ratio <- p[["theme"]][["aspect.ratio"]]
  
  space_v <- sum(convertUnit(gt$heights[-panel$t], unit, valueOnly=TRUE))
  space_h <- sum(convertUnit(gt$widths[-panel$l], unit, valueOnly=TRUE))
  
  panel_width <- plot_width - space_h
  panel_height <- panel_width * aspect.ratio
  
  plot_height <- panel_height + space_v
}

# function to add label to plot:
add.logo <- function(p, img, plot_w_cm = NA, plot_h_cm = NA, logo_w_mm = 10){
  
  if(is.na(plot_w_cm)){
    plot_w_cm <- dev.size("cm")[1]
  }
  if(is.na(plot_h_cm)){
    plot_h_cm <- dev.size("cm")[2]
  }
  
  gt <- ggplotGrob(p)
  gb <- ggplot_build(p)
  
  panel_pos <- gt$layout[which(gt$layout$name == "panel"), ]
  space_y <- sum(convertUnit(gt$heights[-panel_pos$t], "mm", valueOnly=TRUE))
  space_x <- sum(convertUnit(gt$widths[-panel_pos$l], "mm", valueOnly=TRUE))
  from_top <- sum(convertUnit(gt$heights[seq(panel_pos$t - 1)], "mm", valueOnly=TRUE))
  from_right <- sum(convertUnit(gt$widths[-seq(panel_pos$l)], "mm", valueOnly=TRUE))
  
  panel_w <- 10 * plot_w_cm - space_x
  
  if(!is.null(gb$plot$theme$aspect.ratio)){
    panel_h <- gb$plot$theme$aspect.ratio * panel_w
  } else{
    panel_h <- 10 * plot_h_cm - space_y
  }
  
  top_mar <- convertUnit(gb$plot$theme$plot.margin[1], "mm", valueOnly=TRUE)
  right_mar <- convertUnit(gb$plot$theme$plot.margin[2], "mm", valueOnly=TRUE)
  
  logo <- rasterGrob(readPNG(img), 
                     x = unit(panel_w + from_right - top_mar, "mm"), 
                     y = unit(panel_h + from_top - top_mar, "mm"), 
                     width = unit(logo_w_mm, "mm"),
                     hjust = 1, vjust=1,
                     interpolate=TRUE)
  
  p + annotation_custom(logo) 
}
```

## What is the RescueTime app?

I love apps and trackers that *continuously* gather data while you don't have to do anything! The RescueTime app is such an app. You simply install the RescueTime app on your mobile phone(s), tablet(s) and/or computer(s) and the app tracks *when* and for *how long* you use the device. When installed on your laptop or desktop computer, the RescueTime app also tracks *what* you were doing and how *productive* your activity has been.

This way, I have collected data about my productivity for already **`r ndays`**  days. On your mobile devices the app needs to be opened in the background, which means that when you accidentally close the app, it won't track! So far, I have collected data on my mobile devices for **`r ndays_mobile`** days.

## How to get your data?

There are several ways to get your RescueTime data. The easiest way may be on your [RescueTime account](https://www.rescuetime.com), where you can find a link to "Download your data archive" under the "Your data" heading in the sidebar of the "Account Settings" page. When you click this link, you can generate a `.csv` file which lists the number of minutes for each activity per hour of the day for your entire logging history.

Alternatively, you can get your data using the [RescueTime API](https://www.rescuetime.com/anapi/setup/documentation). In contrast to the data archive downloaded from your RescueTime account, the Rescue Time API does not allow you to retrieve data from more than 3 months ago unless you have a Premium account. On the other hand, the data from the RescueTime API can be summarized in chunks with a minimum size of 5 minutes and also includes **productivity metrics**.

## Productivity Metrics

Each activity is categorized as *Very Distracting*, *Distracting*, *Neutral*, *Productive* and *Very Productive* (Figure  \@ref(fig:ProdPulse)). This productivity score is, of course, a bit arbitrary as you can be very productive when visiting a webshop, whereas you can perform completely irrelevant work using a text editor, for example. To get a better insight in your productivity, you have the ability to manually adjust the productivity metrics of an activity in your RescueTime account.

### Average and Daily Productivity Pulse

Fortunately, most of my time is spent (very) productive `r emo::ji("blush")`. On average, I spent `r round(sum(subset(RescueTime[["day"]], Productivity == "Very Productive")$Time) / ndays / 60)` minutes *very productive* and `r round(sum(subset(RescueTime[["day"]], Productivity == "Productive")$Time) / ndays / 60)` minutes *productive* per day (Figure  \@ref(fig:ProdPulse) and Figure  \@ref(fig:ProdBeeswarm)).

```{r h_beeswarm, echo=FALSE}
h_ProdBeeswarm <- plot_height_single_beeswarm(RT_plots[["Prod_beeswarm"]], w, "in")
```

::::: {.panelset}

::: {.panel}

### Mean productivity pulse {.panel-name}

```{r ProdPulse, echo=FALSE, fig.width = w, fig.height = h_ProdBeeswarm, fig.cap="\\label{fig:ProdPulse} The average distribution of productivity metrics tracked with the Rescue Time app."}
RT_plots[["Prod_pulse"]] %>%
  add.logo(., img = here("static", "img", "app_logos", "RescueTime.png"), 
           plot_w_cm = w * 2.54, plot_h_cm = h_ProdBeeswarm * 2.54)
```

:::

::: {.panel}

### Daily productivity pulse {.panel-name}

```{r ProdBeeswarm, echo=FALSE, fig.width = w, fig.height = h_ProdBeeswarm, fig.cap="\\label{fig:ProdBeeswarm} Distribution of daily productivity metrics, including days without computer use."}
RT_plots[["Prod_beeswarm"]] %>%
  add.logo(., img = here("static", "img", "app_logos", "RescueTime.png"), 
           plot_w_cm = w * 2.54, plot_h_cm = h_ProdBeeswarm * 2.54)
```

:::

:::::

### Productivity per Weekday or Hour

Plotting the productivity pulse per day of the week, you can see that Monday, Wednesday and Friday are my *most productive* days (Figure  \@ref(fig:ProdWeekly)). When looking at the average productivity pulse during the day (Figure  \@ref(fig:ProdHourly)), you see that on a typical day, I am most productive between 9 to 12 in the morning with another productivity burst between 3 and 6 in the afternoon.

::::: {.panelset}

::: {.panel}

### Productivity per weekday {.panel-name}

```{r ProdWeekly, echo=FALSE, fig.cap="\\label{fig:ProdWeekly} The average productivity pulse on the different days in the week."}

RT_plots[["Prod_Weekly"]]  %>%
  add.logo(., img = here("static", "img", "app_logos", "RescueTime.png"), 
           plot_w_cm = w * 2.54, plot_h_cm = 5 * 2.54)

```

:::

::: {.panel}

### Productivity per hour {.panel-name}

```{r ProdHourly, echo=FALSE, fig.cap="\\label{fig:ProdHourly} The average productivity pulse throughout the day."}

RT_plots[["Prod_Hourly"]]  %>%
  add.logo(., img = here("static", "img", "app_logos", "RescueTime.png"), 
           plot_w_cm = w * 2.54, plot_h_cm = 5 * 2.54)

```

:::

:::::


## Computer vs. Mobile device

Besides the productivity metrics, RescueTime also allows you to track *when* and for *how long* you use your computer or mobile device. It should, however, be noted that the RescueTime app on your mobile device cannot track which app or program is being used. For me, any time spent on my tablet or mobile phone is categorized as "iOS device" and assigned a **Very Distracting** productivity score.

Using the RescueTime API, you can get a summary of your activity data in chunks of 5 minutes. The average time spent on my laptop vs. my mobile devices across the days of the week is visualized in Figure \@ref(fig:LaptopMobile). 

```{r LaptopMobile, echo=FALSE, fig.height = 7,  fig.cap="\\label{fig:LaptopMobile} The time spent on my laptop and mobile devices during the days of the week."}

RT_plots[["LaptopMobile"]] %>%
  add.logo(., img = here("static", "img", "app_logos", "RescueTime.png"), 
           plot_w_cm = w * 2.54, plot_h_cm = 7 * 2.54)

```

## Main categories

The activities tracked on your desktop computer or laptop are divided into 11 main categories: Software development, Design & composition, Communication & scheduling, Utilities, Reference & learning, Uncategorized, Business, Social networking, Shopping, News & opinion, and Entertainment. Figure \@ref(fig:Donuts) shows the average time per day spent in these 11 categories as well as the daily time spent on the mobile device.

```{r Donuts, echo = FALSE, fig.width = w, fig.height = w * 3/4 + (3 + 1.5 + 1.8) / 2.54, fig.cap="\\label{fig:Donuts} Average time spend per day on the 12 main categories."}

RT_plots[["donut"]](img_path = here("static", "img", "Trackers", "RescueTime", "Categories"))

```

## Categories and Activities

You can manually adjust the categorization in your RescueTime account, which is especially useful for frequently used, uncategorized applications that would otherwise be assigned a 'neutral' productivity score. Moreoever, the RescueTime app on your desktop computer tracks the time spent on each individual application, website or activity. I used the `r emo::ji("package")` `{reactable}` to create the below `reactable` that summarizes the mean time per day spent on various programs and websites, categorized into the 11 main categories and 64 sub-categories.

```{r reactable, include=FALSE}
make.reactable <- function(Overview, Category, Activity,
                           img_path_Overview = "img/Categories",
                           img_path_Activity = "img/Programs",
                           fontsize_Act = 14,
                           padding_Cat = 16,
                           colwidth_spark = 130,
                           time_limit, recolor){
  
  Productivity_col <- rgb(red = c(13, 65, 177, 218, 212, 160),
                          green = c(88, 130, 193, 105, 28, 235),
                          blue = c(193, 221, 191, 93, 21, 142),
                          names = c("Very Productive", "Productive", "Neutral", 
                                    "Distracting", "Very Distracting", "Mobile Phone"),
                          maxColorValue = 255)
  
  icon_col <- c("#e5eeff", "#a6c4ff", "#251a66")
  
  # Define columns for Overview, Category, Activity ----
  set.columns <- function(reactable_df,
                          colwidth_name = 250, 
                          colwidth_pulse = 180,
                          colwidth_donut = 48,
                          col_height = 52){
    
    columns <- list(
      Overview = colDef(name = "Main Category",
                        width = colwidth_name, 
                        style = list(height = col_height),
                        cell = function(value){
                          img_src <- knitr::image_uri(paste0(img_path_Overview, "/",
                                                             gsub(" .*$", "", value), ".png"))
                          image <- img(src = img_src, width = "48px", alt = value)
                          div(style = list(display = "flex", alignItems = "center"),
                              image,
                              div(style = list(marginLeft = "8px"), value))
                        }),
      Pulse_rel = colDef(name = "Average Time per Day",
                         width = colwidth_pulse,
                         cell = function(value, index) {
                           stacked_bar(df = Overview, 
                                       list_of_values = value,
                                       row = index, height = "40px")
                         }),
      daily_Distracting = colDef(name = "Last 30 days",
                                 width = colwidth_spark,
                                 cell = function(value, index) {
                                   sparkline(values = cbind(-map(Overview$daily_Distracting, ~round(magrittr::extract(rev(.), 30:1)))[[index]], 
                                                            map(Overview$daily_Productive, ~round(magrittr::extract(rev(.), 30:1)))[[index]]),
                                             type = "bar",
                                             height = 40,
                                             width = colwidth_spark,
                                             stackedBarColor = bar_col,
                                             tooltipFormatter = JS(
                                               sprintf(
                                                 "function(sparkline, options, field){
                                                           debugger;
                                                           return('<b>'+ %s[field[0].offset] + '</b><br/>' +
                                                           '<span style=color:' + field[0].color + '> &#9679 </span>' +
                                                           Math.round(field[0].value) + ' min/day' + '<br/>' +
                                                           '<span style=color:' + field[1].color + '> &#9679 </span>' +
                                                           -Math.round(field[1].value) + ' min/day');
                                                           }",
                                                 jsonlite::toJSON(rev(Overview$DateLabel[[1]])[30:1])
                                               )
                                             ))
                                 }),
      monthly_Distracting = colDef(name = "Monthly Trend",
                                   width = colwidth_spark,
                                   cell = function(value, index) {
                                     sparkline(values = cbind(-Overview$monthly_Distracting[[index]], 
                                                              Overview$monthly_Productive[[index]]),
                                               type = "bar", 
                                               height = 40,
                                               width = colwidth_spark,
                                               stackedBarColor = bar_col,
                                               tooltipFormatter = JS(
                                                 sprintf(
                                                   "function(sparkline, options, field){
                                                           debugger;
                                                           return('<b>'+ %s[field[0].offset] + '</b><br/>' +
                                                           '<span style=color:' + field[0].color + '> &#9679 </span>' +
                                                           Math.round(field[0].value) + ' min/day' + '<br/>' +
                                                           '<span style=color:' + field[1].color + '> &#9679 </span>' +
                                                           -Math.round(field[1].value) + ' min/day');
                                                           }",
                                                   jsonlite::toJSON(Overview$MonthLabel[[1]])
                                                 )
                                               ))
                                   }),
      Percentage = colDef(show = FALSE),
      Productivity = colDef(show = FALSE),
      Pulse_abs = colDef(show = FALSE),
      MonthLabel = colDef(show = FALSE),
      DateLabel = colDef(show = FALSE),
      Daily_min = colDef(show = FALSE),
      Daily_time = colDef(show = FALSE),
      daily_Productive = colDef(show = FALSE),
      monthly_Productive = colDef(show = FALSE))
    
    if(substitute(reactable_df) == "Cat"){
      columns <- c(list(
        "Category" = colDef(
          name = "Category",
          width = colwidth_name - padding_Cat,
          cell = function(value, index){
            donut <- donut(df = Cat, row = index, width = colwidth_donut)
            div(style = list(display = "flex", alignItems = "center"),
                donut,
                div(style = list(marginLeft = "8px"), value))
          }
        ),
        "Percentage" = colDef(show = FALSE)),
        columns) %>%
        assign_in(., "Overview", value = colDef(show = FALSE)) %>%
        assign_in(., "monthly_Distracting", value = colDef(show = FALSE)) %>%
        assign_in(., "daily_Distracting", value = colDef(show = FALSE))
    }
    
    if(substitute(reactable_df) == "Act") {
      columns <- c(list(
        "Activity" = colDef(
          name = "Activity",
          width = colwidth_name + padding_Cat - 2,
          vAlign = "center",
          cell = function(value, index) {
            insert.icon(
              df = Act, app = value, row = index, 
              img_path_Activity = img_path_Activity,
              recolor = recolor, fill = icon_col[3])
          }
        ),
        "Category" = colDef(show = FALSE)),
        columns,
        list("icon" = colDef(show = FALSE))) %>%
        assign_in(., "Overview", value = colDef(show = FALSE)) %>%
        assign_in(., "daily_Distracting", value = colDef(show = FALSE)) 
    }
    return(columns)
  }
  
  # function to add icon to value: ----
  insert.icon <- function(df, app, row, 
                          img_path_Activity, 
                          icon_width = 24,
                          recolor = FALSE, fill = "black"){
    icon <- df[["icon"]][row]
    icon_set <- ifelse(grepl(".png$", icon) == TRUE, "customicons",
                       str_extract(icon, "^.*(?=\\s)"))
    icon_name <- ifelse(grepl(".png$", icon) == TRUE, icon,
                        str_extract(icon, "(?<=\\s).*$"))
    
    if(is.na(icon_set)) {
      src_icon <- NULL
    }
    else if (icon_set == "customicons") {
      img_file <- file.path(img_path_Activity, icon_name)
      img <- readPNG(img_file)
      if(recolor){
        # change all black to icon_color
        col <- col2rgb(fill)
        img[, , 1][img[, , 1] == 0] <- col[1] / 255
        img[, , 2][img[, , 2] == 0] <- col[2] / 255
        img[, , 3][img[, , 3] == 0] <- col[3] / 255
        # and save colored png:
        icon_name <- paste0(str_extract(icon, "^.*(?=\\.png)"), "_colored.png")
        writePNG(img, file.path(img_path_Activity, "colored", icon_name))
      }
      if(fill != "black"){
        img_path_Activity <- file.path(img_path_Activity, "colored")
        icon_name <- paste0(str_extract(icon, "^.*(?=\\.png)"), "_colored.png")
      }
      img <- knitr::image_uri(file.path(img_path_Activity, icon_name))
      src_icon <- img(src = img, width = paste0(icon_width, "px"))
    } else if (icon_set == "simple-icons") {
      src_icon <- icon_style(simple_icons(icon_name),
                             scale = icon_width / fontsize_Act, fill = fill)
    } else if (icon_set == "academic-icons") {
      src_icon <-
        icon_style(academicons(icon_name), scale = 1.5, fill = fill)
    } else if (icon_set == "fontawesome") {
      src_icon <-
        icon_style(fontawesome(icon_name), scale = 1.5, fill = fill)
    }
    
    div(style = list(display = "flex", alignItems = "center"),
        div(style = list(width = "40px"), src_icon),
        div(style = list(marginLeft = "8px"), app))
  }
  
  # Variables for reactable: ----
  stacked_bar <- function(df, list_of_values, row, height = "28px"){
    full_width <- max(df[["Daily_min"]])
    width_bar <- df[["Daily_min"]][row]
    
    label <- div(style = list(flexGrow = 1, marginLeft = "8px", 
                              fontSize = "12px"), df[["Daily_time"]][row])
    
    divs <- imap(list_of_values, function(value, i){
      bar <- div(style = list(background = Productivity_col[[df[["Productivity"]][[row]][i]]],
                              width = paste0(round(value * width_bar / full_width), "%"), 
                              height = height))
    })
    div(style = list(display = "flex", alignItems = "center"), divs, label)
  }
  bar_col <- unname(Productivity_col[c("Very Distracting", "Very Productive")])
  donut <- function(df, row, width = 60){
    percentage <- df[["Percentage"]][row]
    productivity <- Overview[["Productivity"]][[1]]
    colors <- unname(Productivity_col[productivity])
    r <- width / 2.5
    length <- 2 * pi * r
    
    values <- unlist(df[["Pulse_rel"]][row]) * percentage
    slice_end <- cumsum(values) 
    slice_begin <- c(0, slice_end[-5])
    
    label <-  div(style = list(position = "absolute", fontSize = "12px", 
                               lineHeight = paste0(width, "px")),
                  paste0(round(percentage * 100), "%"))
    
    circle <- tags$circle(cx = 0.5 * width, cy = 0.5 * width, r = r, fill = "transparent", 
                          stroke = rgb(0,0,0,0.1), strokeWidth = width / 5)
    
    slices <- imap(values, function(value, i){
      array <- c(value, 100 - value) / 100
      offset <- (100 - slice_begin[i] + 25) %% 100
      
      slice <- tags$circle(cx = 0.5 * width, cy = 0.5 * width, r = r, fill = "transparent", 
                           stroke = colors[i], strokeWidth = width / 5, 
                           strokeDasharray = array * length,
                           strokeDashoffset = offset / 100 * length)
    })
    
    donut <- tags$svg(circle, slices)
    div(style = list(width = width, height = width, justifyContent = "center",
                     display = "inline-flex", position = "relative"), donut, label)
  }

  # make the reactable: ----
  reactable(
    Overview,
    pagination = FALSE,
    sortable = FALSE,
    theme = reactableTheme(
      color = icon_col[3],
      borderColor = icon_col[2],
      cellPadding = "8px 8px",
      headerStyle = list(fontSize = "16px"),
      style = list(fontFamily = "Comfortaa",
                   fontSize = "15px")
    ),
    defaultColDef = colDef(vAlign = "center", headerVAlign = "bottom"),
    columns = set.columns(Overview),
    details = function(index) {
      Cat <- Category[Category$Overview == Overview$Overview[index], ]
      if (length(unique(Cat$Category)) > 1) {
        div(
          style = list(padding = paste0(padding_Cat, "px")),
          reactable(
            Cat,
            pagination = FALSE,
            sortable = FALSE,
            outlined = TRUE,
            theme = reactableTheme(
              backgroundColor = icon_col[1],
              color = icon_col[3],
              borderColor = icon_col[2],
              headerStyle = list(fontSize = "15px"),
              style = list(fontSize = "14px")
            ),
            defaultColDef = colDef(vAlign = "center", headerVAlign = "bottom"),
            columns = set.columns(Cat) %>%
              assign_in(
                .,
                list("Category", "cell"),
                value = function(value, index){
                  donut <- donut(df = Cat, row = index, width = 48)
                  div(style = list(display = "flex", alignItems = "center"),
                      donut,
                      div(style = list(marginLeft = "8px"), value))
                }
              ) %>%
              assign_in(
                .,
                list("Pulse_rel", "cell"),
                value =  function(value, index) {
                  stacked_bar(
                    df = Cat,
                    list_of_values = value,
                    row = index,
                    height = "40px"
                  )
                }
              ),
            details = function(index) {
              Act <- Activity[Activity$Category == Cat$Category[index], ] %>%
                filter(Daily_min > time_limit)
              if (length(unique(Act$Activity)) >= 1) {
                div(
                  style = list(padding = "16px"),
                  reactable(
                    Act,
                    sortable = FALSE,
                    outlined = TRUE,
                    theme = reactableTheme(
                      color = icon_col[3],
                      borderColor = icon_col[2],
                      headerStyle = list(fontSize = "15px"),
                      style = list(fontSize = paste0(fontsize_Act, "px"))
                    ),
                    defaultColDef = colDef(vAlign = "center", headerVAlign = "bottom"),
                    columns = set.columns(Act) %>%
                      assign_in(
                        .,
                        list("Pulse_rel", "cell"),
                        value =  function(value, index) {
                          stacked_bar(
                            df = Act,
                            list_of_values = value,
                            row = index,
                            height = "40px"
                          )
                        }
                      ) %>%
                      assign_in(
                        .,
                        list("Activity", "cell"),
                        value = function(value, index) {
                          insert.icon(
                            df = Act,
                            app = value,
                            row = index,
                            img_path_Activity = img_path_Activity,
                            recolor = recolor,
                            fill = icon_col[3]
                          )
                        }
                      ) %>%
                      assign_in(
                        .,
                        list("monthly_Distracting", "cell"),
                        value = function(value, index) {
                          sparkline(
                            values = cbind(
                              -Act$monthly_Distracting[[index]],
                              Act$monthly_Productive[[index]]
                            ),
                            type = "bar",
                            height = 40,
                            width = colwidth_spark,
                            stackedBarColor = bar_col,
                            tooltipFormatter = JS(
                              sprintf(
                                "function(sparkline, options, field){
                                                           debugger;
                                                           return('<b>'+ %s[field[0].offset] + '</b><br/>' +
                                                           '<span style=color:' + field[0].color + '> &#9679 </span>' +
                                                           Math.round(field[0].value) + ' min/day' + '<br/>' +
                                                           '<span style=color:' + field[1].color + '> &#9679 </span>' +
                                                           -Math.round(field[1].value) + ' min/day');
                                                           }",
                                jsonlite::toJSON(Act$MonthLabel[[1]])
                              )
                            )
                          )
                        }
                      ) %>%
                      assign_in(
                        .,
                        "daily_Distracting",
                        value = colDef(
                          name = "Daily time",
                          width = colwidth_spark,
                          cell = function(value, index) {
                            sparkline(
                              values = Act$daily_Productive[[index]] - Act$daily_Distracting[[index]],
                              type = "bar",
                              height = 40,
                              width = colwidth_spark - 15,
                              barColor = 	bar_col[2],
                              negBarColor	= bar_col[1],
                              tooltipFormatter = JS(
                                sprintf(
                                  "function(sparkline, options, field){
                                                           debugger;
                                                           return('<b>'+ %s[field[0].offset] + '</b><br/>' +
                                                           '<span style=color:' + field[0].color + '> &#9679 </span>' +
                                                           Math.round(field[0].value) + ' minutes');
                                                           }",
                                  jsonlite::toJSON(Overview$DateLabel[[1]])
                                )
                              )
                            )
                          }
                        )
                      )
                  )
                )
              }
            }
          )
        )
      }
    }
  )
}

tbl <- make.reactable(Overview = RescueTime[["Overview"]],
               Category = RescueTime[["Category"]],
               Activity = RescueTime[["Activity"]],
               img_path_Overview = here("static", "img", "Trackers", "RescueTime", "Categories"),
               img_path_Activity = here("static", "img", "Trackers", "RescueTime", "Activity"),
               time_limit = 1/60,
               recolor = FALSE)
```

```{r reactable2, fig.width = 9, echo=FALSE}
# figure out how to change font

div(class = "table",
    div(
      class = "header",
      img(class = "logo", src = knitr::image_uri(
        here("static", "img", "app_logos", "RescueTime.png")
      )),
      div(
        class = "subtitle",
        div(
          class = "title",
          "How do I spend my time on my laptop?"
        ),
        paste0(
          "Measured with Rescue Time (",
          ndays, " days)"
        )
      )
    ),
    tbl,
    div(class = "caption",
        paste("Measured between",
              format(RescueTime[["pc"]]$Date[1], format = "%d %b'%y"),
              "-",
              format(rev(RescueTime[["pc"]]$Date)[1], format = "%d %b'%y")))
    )

```


<img src="/img/app_logos/RescueTime.png" width="10%" style="float:left; border-radius:10%; margin:5px;"/>

## Conclusion

The RescueTime app allows you to freely and silently gather a wealth of data about your computer and mobile phone usage. Although your RescueTime account already allows you to view your statistics and create reports in various ways, the best part of the RescueTime app - to me `r emo::ji("blush")` - is the accessibility of your own data. However, when using the RescueTime API, you need to make sure to download and store your data at least every 3 months.

If you want to improve your productivity, the RescueTime app offers various tools to, for example, set goals or time limits, or even block certain (distracting) applications or websites. A Premium subscription offers even more tools to potentially enhance your productivity, but comes at a monthly cost of \$12 (or $78 annually) which, for me, is not worth the merits.

### RescueTime - Pros:

- Data about computer and mobile device usage are continously tracked.
- All data is (freely) accessible without need for Premium subscription.
- You can install the RescueTime app on multiple computers as well as your mobile phone(s) or tablet(s).
- You can automate your data collection using the (well-documented) RescueTime API.
- You can analyze and visualize various activity and productivity metrics, and generate reports, on your RescueTime account.

### RescueTime - Cons:

- The mobile RescueTime app only tracks time and does not log applications or activities.
- When your mobile device(s) have the same OS you won't be able to differatiate between the time on each device as all activities are categorized as, for example, "iOS device".
- For accurate use of the automatically assigned productivity metrics, a manual check or adjustment is needed.
- Without the Premium account the RescueTime API only allows access to data from the last 3 months.

## Resources

- `r fontawesome::fa("github")` Code to collect, analyze and visualize my RescueTime data on [Github](https://github.com/IreneVDB/RescueTime)
- RescueTime [website](https://www.rescuetime.com)
- RescueTime [API documentation](https://www.rescuetime.com/anapi/setup/documentation)

```{r echo=FALSE}
tags$link(href="https://fonts.googleapis.com/css?family=Comfortaa",
          rel="stylesheet")
```

```{css echo=FALSE}
.table{
  background-color: white;
}
.subtitle{
  font-size: 18px;
}
.title{
  font-size: 24px;
  font-weight: 600;
  margin-top: 8px;
  margin-bottom: 12px;
  text-align:left;
}
.header{
  display: flex;
  align-items: center;
  align-content: flex-start;
  font-family: Comfortaa;
  color: #251a66;
  margin-left: 8px;
  margin-right: 8px;
  margin-bottom: 18px;
}
.logo{
  width: 64px;
  height: 64px;
  margin-right: 8px;
}
.caption{
  font-size:12px;
  font-family: Comfortaa;
  color:#251a66;
  margin-left: 8px;
  margin-bottom: 12px;
  margin-top: 10px;
}
```
