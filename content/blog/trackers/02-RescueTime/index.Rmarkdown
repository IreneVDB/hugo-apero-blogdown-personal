---
title: "Rescue Time"
weight: 2
subtitle: "An app to track your computer and mobile phone usage"
excerpt: "The RescueTime app is a **productivity** tracker that you can install on your computer and mobile devices. Here, you'll read about my experiences with the RescueTime app and how you can get the most out of your data!"
date: 2022-02-15
draft: true
categories: [Habits, Productivity, RescueTime]

---

<style>body {text-align: justify}</style>

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      warning = FALSE,
                      message = FALSE,
                      fig.width = 7.5)
#figure width:
w <- knitr::opts_chunk$get("fig.width")

library(here)
library(pins)
library(tidyverse)
library(grid)
library(ggtext)
library(png)
library(lubridate)

xaringanExtra::use_panelset()
```

```{r load_data, include=FALSE}
# need to work on an automated procedure to update the RescueTime Data, Plots and Reactable
# then in this blog simply 'display' the items

RescueTime <- pin_get("RescueTime")
RT_plots <- pin_get("RT_plots")

Productivity_col <- rgb(red = c(13, 65, 177, 218, 212, 160),
                        green = c(88, 130, 193, 105, 28, 235),
                        blue = c(193, 221, 191, 93, 21, 142),
                        names = c("Very Productive", "Productive", "Neutral", 
                                  "Distracting", "Very Distracting", "Mobile Phone"), maxColorValue = 255)

all_dates <- seq(RescueTime[["day"]]$Date[1], rev(RescueTime[["day"]]$Date)[1], by = "day")
ndays <- length(all_dates)
ndays_mobile <- length(unique(RescueTime[["mobile"]]$Date))

# function to get exact height of beeswarm plots:
plot_height_single_beeswarm <- function(p, plot_width, unit){
  gt <-  ggplotGrob(p)
  panel <- gt$layout[which(gt$layout$name == "panel"), ]
  aspect.ratio <- p[["theme"]][["aspect.ratio"]]
  
  space_v <- sum(convertUnit(gt$heights[-panel$t], unit, valueOnly=TRUE))
  space_h <- sum(convertUnit(gt$widths[-panel$l], unit, valueOnly=TRUE))
  
  panel_width <- plot_width - space_h
  panel_height <- panel_width * aspect.ratio
  
  plot_height <- panel_height + space_v
}

# function to add label to plot:
add.logo <- function(p, img, plot_w_cm = NA, plot_h_cm = NA, logo_w_mm = 10){
  
  if(is.na(plot_w_cm)){
    plot_w_cm <- dev.size("cm")[1]
  }
  if(is.na(plot_h_cm)){
    plot_h_cm <- dev.size("cm")[2]
  }
  
  gt <- ggplotGrob(p)
  gb <- ggplot_build(p)
  
  panel_pos <- gt$layout[which(gt$layout$name == "panel"), ]
  space_y <- sum(convertUnit(gt$heights[-panel_pos$t], "mm", valueOnly=TRUE))
  space_x <- sum(convertUnit(gt$widths[-panel_pos$l], "mm", valueOnly=TRUE))
  from_top <- sum(convertUnit(gt$heights[seq(panel_pos$t - 1)], "mm", valueOnly=TRUE))
  from_right <- sum(convertUnit(gt$widths[-seq(panel_pos$l)], "mm", valueOnly=TRUE))
  
  panel_w <- 10 * plot_w_cm - space_x
  
  if(!is.null(gb$plot$theme$aspect.ratio)){
    panel_h <- gb$plot$theme$aspect.ratio * panel_w
  } else{
    panel_h <- 10 * plot_h_cm - space_y
  }
  
  top_mar <- convertUnit(gb$plot$theme$plot.margin[1], "mm", valueOnly=TRUE)
  right_mar <- convertUnit(gb$plot$theme$plot.margin[2], "mm", valueOnly=TRUE)
  
  logo <- rasterGrob(readPNG(img), 
                     x = unit(panel_w + from_right - top_mar, "mm"), 
                     y = unit(panel_h + from_top - top_mar, "mm"), 
                     width = unit(logo_w_mm, "mm"),
                     hjust = 1, vjust=1,
                     interpolate=TRUE)
  
  p + annotation_custom(logo) 
}
```

## What is the RescueTime app?

I love apps and trackers that *continuously* gather data while you don't have to do anything! The RescueTime app is such an app. You simply install the RescueTime app on your mobile phone(s), tablet(s) and/or computer(s) and the app tracks *when* and for *how long* you use the device. When installed on your laptop or desktop computer, the RescueTime app also tracks *what* you were doing and how *productive* your activity has been.

This way, I have been collecting data about my productivity for already **`r ndays`**  days. On your mobile devices the app needs to be opened in the background, which means that when you accidentally close the app, it won't track! So far, I have collected data on my mobile devices for **`r ndays_mobile`** days.

## How to get your data?

There are several ways to get your RescueTime data. The easiest way may be on your [RescueTime account](https://www.rescuetime.com), where you can find a link to "Download your data archive" under the "Your data" heading in the sidebar of the "Account Settings" page. When you click this link, you can generate a `.csv` file which lists the number of minutes for each activity per hour of the day for your entire logging history.

Alternatively, you can get your data using the [RescueTime API](https://www.rescuetime.com/anapi/setup/documentation). In contrast to the data archive downloaded from your RescueTime account, the Rescue Time API does not allow you to retrieve data from more than 3 months ago unless you have a Premium account. On the other hand, the data from the RescueTime API can be summarized in chunks with a minimum size of 5 minutes and also includes **productivity metrics**.

## Productivity Metrics

Each activity is categorized as *Very Distracting*, *Distracting*, *Neutral*, *Productive* and *Very Productive* (Figure  \@ref(fig:ProdPulse)). This productivity score is, of course, a bit arbitrary as you can be very productive when visiting a webshop, whereas you can perform completely irrelevant work using a text editor, for example. To get a better insight in your productivity, you have the ability to manually adjust the productivity metrics of an activity in your RescueTime account.

### Average and Daily Productivity Pulse

Fortunately, most of my time is spent (very) productive `r emo::ji("blush")`. On average, I spent `r round(sum(subset(RescueTime[["day"]], Productivity == "Very Productive")$Time) / ndays / 60)` minutes *very productive* and `r round(sum(subset(RescueTime[["day"]], Productivity == "Productive")$Time) / ndays / 60)` minutes *productive* per day (Figure  \@ref(fig:ProdPulse) and Figure  \@ref(fig:ProdBeeswarm)).

```{r h_beeswarm, echo=FALSE}
h_ProdBeeswarm <- plot_height_single_beeswarm(RT_plots[["Prod_beeswarm"]], w, "in")
```

::::: {.panelset}

::: {.panel}

### Mean productivity pulse {.panel-name}

```{r ProdPulse, echo=FALSE, fig.width = w, fig.height = h_ProdBeeswarm, fig.cap="\\label{fig:ProdPulse} The average distribution of productivity metrics tracked with the Rescue Time app."}
RT_plots[["Prod_pulse"]] %>%
  add.logo(., img = here("static", "img", "app_logos", "RescueTime.png"), 
           plot_w_cm = w * 2.54, plot_h_cm = h_ProdBeeswarm * 2.54)
```

:::

::: {.panel}

### Daily productivity pulse {.panel-name}

```{r ProdBeeswarm, echo=FALSE, fig.width = w, fig.height = h_ProdBeeswarm, fig.cap="\\label{fig:ProdBeeswarm} Distribution of daily productivity metrics, including days without computer use."}
RT_plots[["Prod_beeswarm"]] %>%
  add.logo(., img = here("static", "img", "app_logos", "RescueTime.png"), 
           plot_w_cm = w * 2.54, plot_h_cm = h_ProdBeeswarm * 2.54)
```

:::

:::::

### Productivity per Weekday or Hour

Plotting the productivity pulse per day of the week, you can see that Monday, Wednesday and Friday are my *most productive* days (Figure  \@ref(fig:ProdWeekly)). When looking at the average productivity pulse during the day (Figure  \@ref(fig:ProdHourly)), you see that on a typical day, I am most productive between 9 to 12 in the morning with another productivity burst between 3 and 6 in the afternoon.

::::: {.panelset}

::: {.panel}

### Productivity per weekday {.panel-name}

```{r ProdWeekly, echo=FALSE, fig.cap="\\label{fig:ProdWeekly} The average productivity pulse on the different days in the week."}

RT_plots[["Prod_Weekly"]]  %>%
  add.logo(., img = here("static", "img", "app_logos", "RescueTime.png"), 
           plot_w_cm = w * 2.54, plot_h_cm = 5 * 2.54)

```

:::

::: {.panel}

### Productivity per hour {.panel-name}

```{r ProdHourly, echo=FALSE, fig.cap="\\label{fig:ProdHourly} The average productivity pulse throughout the day."}

RT_plots[["Prod_Hourly"]]  %>%
  add.logo(., img = here("static", "img", "app_logos", "RescueTime.png"), 
           plot_w_cm = w * 2.54, plot_h_cm = 5 * 2.54)

```

:::

:::::


## Computer vs. Mobile device

Besides the productivity metrics, RescueTime also allows you to track *when* and for *how long* you use your computer or mobile device. It should, however, be noted that the RescueTime app on your mobile device cannot track which app or program is being used. For me, any time spent on my tablet or mobile phone is categorized as "iOS device" and assigned a **Very Distracting** productivity score.

Using the RescueTime API, you can get a summary of your activity data in chunks of 5 minutes. Tthe average time spent on my laptop vs. my mobile devices across the days of the week is visualized in Figure \@ref(fig:LaptopMobile). In addition, the heatmaps in Figure \@ref(fig:HMscreentime) and Figure \@ref(fig:HMmobile) show the time spent on either my laptop or mobile devices across the entire logging period (`r ndays` and `r ndays_mobile` days, respectively).

```{r LaptopMobile, echo=FALSE, fig.height = 7,  fig.cap="\\label{fig:LaptopMobile} The time spent on my laptop and mobile devices during the days of the week."}

RT_plots[["LaptopMobile"]] %>%
  add.logo(., img = here("static", "img", "app_logos", "RescueTime.png"), 
           plot_w_cm = w * 2.54, plot_h_cm = 7 * 2.54)

```

::::: {.panelset}

::: {.panel}

### Screen Time {.panel-name}

```{r HMscreentime, echo=FALSE, fig.cap="\\label{fig:HMscreentime} Screen time over time visualized per hour of the day (x-axis) for every tracked week (y-axis). The color intensity correlates with the minutes spent on the computer for that hour of the day."}


```

:::

::: {.panel}

### Mobile device use {.panel-name}

```{r HMmobile, echo = FALSE, fig.cap="\\label{fig:HMmobile} Mobile device usage over time visualized per hour of the day (x-axis) for every tracked week (y-axis). The color intensity correlates with the minutes spent on the computer for that hour of the day. During weeks xx-xx, the RescueTime app was not running in the background and no data has been recorded."}

```

:::

:::::

## Top-level Categories

The activities tracked on your desktop computer or laptop are divided into 11 main categories. Figure \@ref(fig:Overview) shows the average time per day spent in these 11 categories as well as the daily time spent on the mobile device.

```{r Overview, echo = FALSE, fig.width = w, fig.height = w * 3/4 + (3 + 1.5 + 1.8) / 2.54, fig.cap="\\label{fig:Overview} All categories"}

RT.overview <- function(plot_h = NA){
  all_dates <- seq(RescueTime[["day"]]$Date[1], 
                   rev(RescueTime[["day"]]$Date)[1], by = "day")
  
  Category <- RescueTime[["day"]] %>%
    group_by(Overview, Productivity) %>%
    summarise(Time_min = sum(Time_sec) / length(all_dates) / 60) %>%
    mutate(TotTime = sum(Time_min))
  # adjust so that for mobile device not divided by all_dates but by 'tracked days'
  nhours <- length(all_dates) * sum(Category$Time_min) / 60
  
  make.donut <- function(df, category){
    
    subset <- df %>%
      filter(Overview == category) %>%
      mutate(fraction = Time_min / sum(Time_min))
    
    par(mar = c(2, 0, 0, 0), xaxs = "i", yaxs = "i")
    
    pie(subset$fraction, clockwise = TRUE, 
        col = Productivity_col[-6][unique(as.character(subset$Productivity))], 
        border = "white",labels = NA, xlim = c(-0.7, 0.7), ylim = c(-0.7, 0.7))
    symbols(0,0, circles = 0.35, fg = "white", bg = "white", 
            add = TRUE, inches = FALSE)
    text(0, -0.9, labels = category, font = 2, col = "grey20",
         cex = 1, adj=c(0.5, 1), xpd = TRUE)
    text(0, -1, paste0("\n(", round(unique(subset$TotTime)), " min/day)"), 
         col = "grey20", cex = 1, adj=c(0.5, 1), xpd = TRUE)
  }
  
  if(is.na(plot_h)){
    plot_h <- dev.size("cm")[2]
    }
    
  h_title <- 1.5
  h_legend <- 1.8
  
  # par(omi = rep(0.2, 4)/2.54)
  layout(matrix(c(rep(1, 4), rep(2, 4), 3:14), nrow = 5, ncol =  4, byrow = TRUE), heights = lcm(c(h_title, h_legend)))
  
  # first plot is a title + subtitle
  par(mar = c(0, 0, 0.2, 0)/2.54, family = "Comfortaa")
  plot.new()
  text(0, 1, "Productivity pulse of the 12 main Categories", 
       adj = c(0, 1), col = "grey20", font = 2, cex = 2, xpd = TRUE)
  text(0, 0.5, paste0("Measured with RescueTime (", length(all_dates), " days)"), 
       adj = c(0, 1), col = "grey30", cex = 1.5, xpd = TRUE)
  
  # second plot is the legend:
  par(mar = c(0, 0, 0, 0))
  plot.new()
  legend(0.5, 0.5, legend = levels(Category$Productivity),
         fill = Productivity_col[levels(Category$Productivity)], 
         title.adj = 0, title.col = "grey20",
         y.intersp = 1.2, text.col = "grey30",
         border = "transparent", ncol=2,
         cex = 1.2, xjust = 0.5, yjust = 0.5, bty = "n", xpd = TRUE)
  
  # then add the individual donut plots:
  walk(levels(Category$Overview), function(Overview){
    img_path <- here("static", "img", "Trackers", "RescueTime", "Categories")
    image <- readPNG(file.path(img_path, paste0(
      gsub(" .*$", "", Overview), ".png")))

    make.donut(df = Category, category = Overview)
    rasterImage(image, xleft = -0.5, xright = 0.5, ybottom = -0.5, ytop = 0.5)
   })
}
RT.overview()

```

## Sub-categories

You can manually adjust the categorization in your RescueTime account, which is especially useful for frequently used, uncategorized applications that would otherwise be assigned a 'neutral' productivity score.

```{r overview_data, echo=FALSE}
add.overview <- function(df){
 data <- df %>%
   mutate(Overview = case_when(
      Category %in% c("Accounting","Administration", "Customer Relations", 
                      "General Business", "Intelligence", "Marketing",
                      "Operations", "Project Management","Sales") ~ 
        "Business",
      Category %in% c("Calendars", "Email", "General Communication & Scheduling", 
                      "Instant Message", "Meetings", "Voice Chat") ~
        "Communication & Scheduling",
      Category %in% c("General Design & Composition", "Graphic Design", 
                      "Presentation", "Writing") ~ 
        "Design & Composition",
      Category %in% c("Games", "Comedy", "General Entertainment", "Music", "Photos", "Video") ~
        "Entertainment",
      Category %in% c("Business", "General News & Opinion", "Regional", "Entertainment",
                      "International", "Science & Technology", "Sports", "Society") ~
        "News & Opinion",
      Category %in% c("Business & Finance", "Employment", "Engineering & Technology", 
                      "Food", "General Reference & Learning", "Health & Medicine", "Home & Garden", 
                      "Legal & Gov't", "Maps & Regional", "Search", "Travel & Outdoors") ~
        "Reference & Learning",
      Category %in% c("Clothes & Personal", "Electronics", "General Shopping", 
                      "Office") ~
        "Shopping",
      Category %in% c("General Social Networking", "Professional Networking") ~
        "Social Networking",
      Category %in% c("Data Modeling & Analysis", "Design & Planning", "Editing & IDEs", 
                      "General Software Development", "Quality Assurance", "Systems Operations") ~
        "Software Development",
      Category %in% c("Anti-Virus & Spyware", "Browsers", "File Sharing", 
                      "General Utilities", "Internet Utilities", "Virtualization", "Other") ~
        "Utilities",
      TRUE ~ "Uncategorized"),
      Overview = fct_reorder(Overview, Time_sec, sum, .desc = TRUE))
}
summarise.table <- function(df, ...){
  
  group_vars <- enquos(...)
  group_syms <- ensyms(...)
  
  data <- df %>%
    mutate(Time_min = Time_sec / 60)
  
  ProdPulse <- data %>%
    group_by(!!!group_vars, Productivity) %>%
    summarise(Time = sum(Time_min)) %>%
    complete(., Productivity, fill = list(Time = 0)) %>%
    summarise(Productivity = list(as.character(Productivity)),
              Pulse_rel = list(Time / sum(Time) * 100),
              Pulse_abs = list(Time),
              Daily_min = sum(Time)/ ndays,
              Daily_time = case_when(Daily_min < 1 ~ paste(round(Daily_min * 60), "sec"),
                                     TRUE ~ paste(round(Daily_min), "min")))

  MonthlyTrend <- data %>%
    mutate(ym = factor(format(DateTime, format = "%Y-%m")),
           Productivity = case_when(grepl("Distracting", Productivity) ~ "Distracting",
                                    TRUE ~ "Productive")) %>%
    group_by(!!!group_vars, Productivity, ym) %>%
    summarise(Time = round(sum(Time_min) / days_in_month(ym(first(ym)))[[1]]), .groups = "drop") %>%
    # the nesting gave me headaches: !!enquo or {{}} does not work here...
    complete(., expand(., nesting(!!!group_syms), Productivity, ym), 
             fill = list(Time = 0)) %>%
   group_by(!!!group_vars, Productivity) %>%
   summarise(MonthlyTrend = list(Time),
             MonthLabel = list(format(ym(ym), "%B %Y"))) %>%
    pivot_wider(., names_from = Productivity, values_from = MonthlyTrend,
                names_prefix = "monthly_")

  DailyTrend <- data %>%
    mutate(Productivity = case_when(grepl("Distracting", Productivity) ~ "Distracting",
                                    TRUE ~ "Productive")) %>%
    group_by(!!!group_vars, Productivity, Date) %>%
    summarise(Time = sum(Time_min), .groups = "drop") %>%
    right_join(., data.frame(Date = all_dates), by = "Date") %>%
    complete(., expand(., nesting(!!!group_syms), Productivity, Date),
             fill = list(Time = 0)) %>%
    filter(if_all(all_of(c(map_chr(group_vars, rlang::as_name), "Productivity")), ~ !is.na(.))) %>% # turn the ... into vector with strings
    group_by(!!!group_vars, Productivity) %>%
    summarise(DailyTrend = list(Time),
              DateLabel = list(format(Date, format = "%b %d %Y"))) %>%
    pivot_wider(., names_from = Productivity, values_from = DailyTrend,
                names_prefix = "daily_")

  Summary <-  ProdPulse %>%
    left_join(., DailyTrend) %>%
    left_join(., MonthlyTrend)
}

Overview <- RescueTime[["pc"]] %>%
  add.overview() %>%
  summarise.table(., Overview)


```

```{r reactable, echo=FALSE}
library(reactable) 
library(htmltools)
library(sparkline)

make.reactable.RT <- function(df, groupBy = NULL){
  
  months <- df$MonthLabel[[1]]
  distr_m <- df$monthly_Distracting
  prod_m <- df$monthly_Productive
  days_14 <- rev(df$DateLabel[[1]])[14:1]
  distr_14d <- map(df$daily_Distracting, ~round(magrittr::extract(rev(.), 14:1)))
  prod_14d <- map(df$daily_Productive, ~round(magrittr::extract(rev(.), 14:1)))
  
  stacked_bar <- function(df, list_of_values, row, height = "28px", full_width){
    full_width <- max(df[["Daily_min"]])
    width_bar <- df[["Daily_min"]][row]
    
    label <- div(style = list(flexGrow = 1, marginLeft = "8px"), df[["Daily_time"]][row])
    
    divs <- imap(list_of_values, function(value, i){
      bar <- div(style = list(background = Productivity_col[[df[["Productivity"]][[row]][i]]],
                              width = paste0(round(value * width_bar / full_width), "%"), 
                              height = height))
    })
    div(style = list(display = "flex", alignItems = "center"), divs, label)
  }
  
  reactable(df, 
            pagination = FALSE,
            sortable = FALSE,
            groupBy = groupBy,
            columns = list(
              Overview = colDef(name = "Main Category",
                                minWidth = 250, 
                                cell = function(value){
                                  img_src <- knitr::image_uri(paste0(
                                    here("static", "img", "Trackers", "RescueTime", "Categories"), "/",
                                    gsub(" .*$", "", value), ".png"))
                                  image <- img(src = img_src, width = "48px", alt = value)
                                  div(style = list(display = "flex", alignItems = "center"),
                                      image,
                                      div(style = list(marginLeft = "8px"), value))
                                }),
              Productivity = colDef(show = FALSE),
              Pulse_abs = colDef(show = FALSE),
              MonthLabel = colDef(show = FALSE),
              DateLabel = colDef(show = FALSE),
              Pulse_rel = colDef(name = "Average Time per Day",
                                 cell = function(value, index) {
                                   stacked_bar(df = df,
                                               list_of_values = value,
                                               row = index, height = "36px")
                                 },
                                 minWidth = 200),
              Daily_min = colDef(show = FALSE),
              Daily_time = colDef(show = FALSE),
              daily_Distracting = colDef(name = "Last 14 days", 
                                         cell = function(value, index) {
                                           sparkline(values = cbind(-distr_14d[[index]], prod_14d[[index]]),
                                                     type = "bar", 
                                                     height = 48,
                                                     stackedBarColor = unname(Productivity_col[c("Very Distracting", "Very Productive")]),
                                                     tooltipFormatter = htmlwidgets::JS(
                                                       sprintf(
                                                         "function(sparkline, options, field){
                                                             debugger;
                                                             return('<b>'+ %s[field[0].offset] + '</b><br/>' + 
                                                             '<span style=color:' + field[0].color + '> &#9679 </span>' +  
                                                             field[0].value + ' min/day' + '<br/>' +
                                                             '<span style=color:' + field[1].color + '> &#9679 </span>' + 
                                                             -field[1].value + ' min/day');
                                                             }",
                                                         jsonlite::toJSON(rev(Overview$DateLabel[[1]])[14:1])
                                                       )
                                                     ))
                                         }),
              daily_Productive = colDef(show = FALSE),
              monthly_Distracting = colDef(name = "Monthly Trend", 
                                           cell = function(value, index) {
                                             sparkline(values = cbind(-distr_m[[index]], prod_m[[index]]),
                                                       type = "bar", 
                                                       # chartRangeMin = -max(c(distr_m[[index]], distr_14d[[index]]), na.rm = TRUE), 
                                                       # chartRangeMax = max(c(prod_m[[index]], prod_14d[[index]]), na.rm = TRUE), 
                                                       height = 48,
                                                       stackedBarColor = unname(Productivity_col[c("Very Distracting", "Very Productive")]),
                                                       tooltipFormatter = htmlwidgets::JS(
                                                           sprintf(
                                                             "function(sparkline, options, field){
                                                             debugger;
                                                             return('<b>'+ %s[field[0].offset] + '</b><br/>' + 
                                                             '<span style=color:' + field[0].color + '> &#9679 </span>' +  
                                                             field[0].value + ' min/day' + '<br/>' +
                                                             '<span style=color:' + field[1].color + '> &#9679 </span>' + 
                                                             -field[1].value + ' min/day');
                                                             }",
                                                             jsonlite::toJSON(months)
                                                           )
                                                         ))
                                           }),
              monthly_Productive = colDef(show = FALSE)),
            theme = reactableTheme(
              color = "black",
              borderColor = "grey80",
              cellPadding = "8px 8px",
              style = list(fontFamily = "Comfortaa")))
}
tbl <- make.reactable.RT(df = Overview)

div(class= "overview",
  div(class = "title",
  h2("Overview of Productive and Distracting time across all Categories"),
  paste0("Measured with Rescue Time (",
                      ndays, " days; last day = ", 
                      rev(RescueTime[["pc"]]$Date)[1], ")")
  ),
  tbl
)

```

De margins klopt nog geen bal van: left en right ok (maar dubbelop voor h2); top en bottom lijkt niets te doen?

```{css echo = FALSE}
.overview{
  background-color: white;
  font-family:Comfortaa;
}
.title{
  font-size: 20px;
  margin: 18px 5px 10px 5px;
}

.title h2{
  font-family:Comfortaa;
  font-size: 24px;
  font-weight: 600;
  margin: 18px 5px 10px 5px;
}
```

With reactable fmtr:

```{r reactable_fmtr, echo = FALSE}
library(reactablefmtr)

make.reactable.RT(df = Overview) %>%
  add_title("Overview of Productive and Distracting time on computer",
            font_family = "Comfortaa", font_color = rgb(t(col2rgb("grey20")/255))) %>%
  add_subtitle(paste0("Measured with Rescue Time (", ndays, 
                      " days; last day = ", 
                      rev(RescueTime[["pc"]]$Date)[1], ")"),
               font_family = "Comfortaa", 
               font_color = rgb(t(col2rgb("grey30")/255)),
               font_weight = "normal",
               font_size = 20,
               margin = margin(5,0,10,0))
```

## Activities

Moreoever, the RescueTime app on your desktop computer tracks the time spent on each individual application, website or activity. The Treemap in Figure xxx shows that **R Studio** is clearly my favorite application!

<img src="/img/app_logos/RescueTime.png" width="10%" style="float:left; border-radius:10%; margin:5px;"/>

## Conclusion

The RescueTime app allows you to freely and silently gather a wealth of data about your computer and phone use. Although your RescueTime account already allows you to view your statistics and create reports in various ways, the best part of the RescueTime app - to me `r emo::ji("blush")` - is the accessibility of your own data. However, when using the RescueTime API, you need to make sure to download and store your data at least every 3 months.

If you want to improve your productivity, the RescueTime app offers various tools to, for example, set goals or time limits, or even block certain (distracting) applications or websites. A Premium subscription offers even more tools to potentially enhance your productivity, but comes at a monthly cost of \$12 (or $78 annually) which, for me, is not worth the merits.

### RescueTime - Pros:

- Data about computer and mobile device usage are continously tracked.
- All data is (freely) accessible without need for Premium subscription.
- You can install the RescueTime app on multiple computers as well as your mobile phone(s) or tablet(s).
- You can automate your data collection using the (well-documented) RescueTime API.
- You can analyze and visualize various activity and productivity metrics, and generate reports, on your RescueTime account.

### RescueTime - Cons:

- The mobile RescueTime app only tracks time and does not log applications or activities.
- When your mobile device(s) have the same OS you won't be able to differatiate between the time on each device as all activities are categorized as, for example, "iOS device".
- For accurate use of the automatically assigned productivity metrics, a manual check or adjustment is needed.
- Without the Premium account the RescueTime API only allows access to data from the last 3 months.

## Resources

- `r fontawesome::fa("github")` Code to collect, analyze and visualize my RescueTime data on [Github](https://github.com/IreneVDB/RescueTime)
- RescueTime [website](https://www.rescuetime.com)
- RescueTime [API documentation](https://www.rescuetime.com/anapi/setup/documentation)
